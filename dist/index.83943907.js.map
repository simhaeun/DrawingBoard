{"mappings":"AAAA,MAAMA,aACJC,KAAO,OACPC,aAAc,EAEdC,cACEC,KAAKC,gBACLD,KAAKE,cACLF,KAAKG,U,CAGPF,gBACED,KAAKI,YAAcC,SAASC,eAAe,aAC3CN,KAAKO,SAAWP,KAAKI,YAAYI,cAAc,WAC/CR,KAAKS,UAAYT,KAAKI,YAAYI,cAAc,YAChDR,KAAKU,QAAUV,KAAKS,UAAUD,cAAc,UAC5CR,KAAKW,cAAgBX,KAAKS,UAAUD,cAAc,gBAClDR,KAAKY,aAAeZ,KAAKI,YAAYI,cAAc,eACnDR,KAAKa,cAAgBb,KAAKY,aAAaJ,cAAc,cACrDR,KAAKc,mBAAqBd,KAAKY,aAAaJ,cAAc,oB,CAG5DN,cACEF,KAAKe,QAAUf,KAAKO,SAASS,WAAW,K,CAG1Cb,WACEH,KAAKU,QAAQO,iBAAiB,QAASjB,KAAKkB,aAAaC,KAAKnB,OAC9DA,KAAKO,SAASU,iBAAiB,YAAajB,KAAKoB,YAAYD,KAAKnB,OAClEA,KAAKO,SAASU,iBAAiB,YAAajB,KAAKqB,YAAYF,KAAKnB,OAClEA,KAAKO,SAASU,iBAAiB,UAAWjB,KAAKsB,UAAUH,KAAKnB,OAC9DA,KAAKO,SAASU,iBAAiB,WAAYjB,KAAKuB,WAAWJ,KAAKnB,OAChEA,KAAKa,cAAcI,iBAAiB,QAASjB,KAAKwB,kBAAkBL,KAAKnB,OACzEA,KAAKW,cAAcM,iBAAiB,QAASjB,KAAKyB,cAAcN,KAAKnB,M,CAGvEuB,aACmB,SAAdvB,KAAKH,OACRG,KAAKF,aAAc,E,CAGrB2B,cAAcC,GACZ1B,KAAKc,mBAAmBa,MAAMC,WAAaF,EAAMG,OAAOC,K,CAG1DN,kBAAkBE,GAChB1B,KAAKc,mBAAmBa,MAAMI,MAAQ,GAAGL,EAAMG,OAAOC,UACtD9B,KAAKc,mBAAmBa,MAAMK,OAAS,GAAGN,EAAMG,OAAOC,S,CAGzDV,YAAYM,GACV,GAAiB,SAAd1B,KAAKH,KAAiB,OACzBG,KAAKF,aAAc,EACnB,MAAMmC,EAAkBjC,KAAKkC,iBAAiBR,GAC9C1B,KAAKe,QAAQoB,YACbnC,KAAKe,QAAQqB,OAAOH,EAAgBI,EAAGJ,EAAgBK,GACvDtC,KAAKe,QAAQwB,QAAU,QACvBvC,KAAKe,QAAQyB,YAAcxC,KAAKW,cAAcmB,MAC9C9B,KAAKe,QAAQ0B,UAAYzC,KAAKa,cAAciB,K,CAG9CT,YAAYK,GACV,IAAI1B,KAAKF,YAAa,OACtB,MAAMmC,EAAkBjC,KAAKkC,iBAAiBR,GAC9C1B,KAAKe,QAAQ2B,OAAOT,EAAgBI,EAAGJ,EAAgBK,GACvDtC,KAAKe,QAAQ4B,Q,CAGfrB,UAAUI,GACS,SAAd1B,KAAKH,OACRG,KAAKF,aAAc,E,CAGrBoC,iBAAiBR,GACf,MAAMkB,EAAa5C,KAAKO,SAASsC,wBACjC,MAAO,CACHR,EAAGX,EAAMoB,QAAUF,EAAWG,KAC9BT,EAAGZ,EAAMsB,QAAUJ,EAAWK,I,CAIpC/B,aAAaQ,GACX,MAAMwB,EAAWxB,EAAMyB,cAAcC,UAAUC,SAAS,UACxDrD,KAAKH,KAAOqD,EAAW,OAAS,QAChClD,KAAKO,SAASoB,MAAM2B,OAASJ,EAAW,UAAY,YACpDlD,KAAKY,aAAawC,UAAUG,OAAO,QACnCvD,KAAKU,QAAQ0C,UAAUG,OAAO,S,EAIlC,IAAI3D","sources":["src/js/index.js"],"sourcesContent":["class DrawingBoard {\r\n  MODE = \"NONE\"; // NONE BRUSH ERASER\r\n  IsMouseDown = false; // true false\r\n\r\n  constructor() {\r\n    this.assingElement();\r\n    this.initContext();\r\n    this.addEvent();\r\n  }\r\n\r\n  assingElement() {\r\n    this.containerEl = document.getElementById(\"container\");\r\n    this.canvasEl = this.containerEl.querySelector(\"#canvas\");\r\n    this.toolbarEl = this.containerEl.querySelector(\"#toolbar\");\r\n    this.brushEl = this.toolbarEl.querySelector(\"#brush\");\r\n    this.colorPickerEl = this.toolbarEl.querySelector(\"#colorPicker\");\r\n    this.brushPanelEl = this.containerEl.querySelector(\"#brushPanel\");\r\n    this.brushSliderEl = this.brushPanelEl.querySelector(\"#brushSize\");\r\n    this.brushSizePreviewEl = this.brushPanelEl.querySelector(\"#brushSizePreview\");\r\n  }\r\n\r\n  initContext() {\r\n    this.context = this.canvasEl.getContext(\"2d\");\r\n  }\r\n\r\n  addEvent() {\r\n    this.brushEl.addEventListener(\"click\", this.onClickBrush.bind(this));\r\n    this.canvasEl.addEventListener(\"mousedown\", this.onMouseDown.bind(this));\r\n    this.canvasEl.addEventListener(\"mousemove\", this.onMouseMove.bind(this));\r\n    this.canvasEl.addEventListener(\"mouseup\", this.onMouseUp.bind(this));\r\n    this.canvasEl.addEventListener(\"mouseout\", this.onMouseOut.bind(this));\r\n    this.brushSliderEl.addEventListener(\"input\", this.onChangeBrushSize.bind(this));\r\n    this.colorPickerEl.addEventListener(\"input\", this.onChangeColor.bind(this));\r\n  }\r\n\r\n  onMouseOut() {\r\n    if(this.MODE === \"NONE\") return;\r\n    this.IsMouseDown = false;\r\n  }\r\n\r\n  onChangeColor(event) {\r\n    this.brushSizePreviewEl.style.background = event.target.value;\r\n  }\r\n\r\n  onChangeBrushSize(event) {\r\n    this.brushSizePreviewEl.style.width = `${event.target.value}px`;\r\n    this.brushSizePreviewEl.style.height = `${event.target.value}px`;\r\n  }\r\n\r\n  onMouseDown(event) {\r\n    if(this.MODE === \"NONE\") return;\r\n    this.IsMouseDown = true;\r\n    const currentPosition = this.getMousePosition(event);\r\n    this.context.beginPath();\r\n    this.context.moveTo(currentPosition.x, currentPosition.y);\r\n    this.context.lineCap = \"round\";\r\n    this.context.strokeStyle = this.colorPickerEl.value;\r\n    this.context.lineWidth = this.brushSliderEl.value;\r\n  }\r\n\r\n  onMouseMove(event) {\r\n    if(!this.IsMouseDown) return;\r\n    const currentPosition = this.getMousePosition(event);\r\n    this.context.lineTo(currentPosition.x, currentPosition.y);\r\n    this.context.stroke();\r\n  }\r\n\r\n  onMouseUp(event) {\r\n    if(this.MODE === \"NONE\") return;\r\n    this.IsMouseDown = false;\r\n  }\r\n\r\n  getMousePosition(event) {\r\n    const boundaries = this.canvasEl.getBoundingClientRect();\r\n    return {\r\n        x: event.clientX - boundaries.left,\r\n        y: event.clientY - boundaries.top,\r\n    };\r\n  }\r\n\r\n  onClickBrush(event) {\r\n    const IsActive = event.currentTarget.classList.contains(\"active\");\r\n    this.MODE = IsActive ? \"NONE\" : \"BRUSH\";\r\n    this.canvasEl.style.cursor = IsActive ? \"default\" : \"crosshair\";\r\n    this.brushPanelEl.classList.toggle(\"hide\");\r\n    this.brushEl.classList.toggle(\"active\");\r\n  }\r\n}\r\n\r\nnew DrawingBoard();\r\n"],"names":["DrawingBoard","MODE","IsMouseDown","constructor","this","assingElement","initContext","addEvent","containerEl","document","getElementById","canvasEl","querySelector","toolbarEl","brushEl","colorPickerEl","brushPanelEl","brushSliderEl","brushSizePreviewEl","context","getContext","addEventListener","onClickBrush","bind","onMouseDown","onMouseMove","onMouseUp","onMouseOut","onChangeBrushSize","onChangeColor","event","style","background","target","value","width","height","currentPosition","getMousePosition","beginPath","moveTo","x","y","lineCap","strokeStyle","lineWidth","lineTo","stroke","boundaries","getBoundingClientRect","clientX","left","clientY","top","IsActive","currentTarget","classList","contains","cursor","toggle"],"version":3,"file":"index.83943907.js.map"}